#pragma once

#define DEVICE_NAME L"\\Device\\" L"Fantasy"
#define SYMBOLIC_LINK_SHORT_NAME L"Fantasy"
#define SYMBOLIC_LINK_NAME (L"\\DosDevices\\" SYMBOLIC_LINK_SHORT_NAME)

#define KCTL_CODE(x) CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800 + x, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define READ_VIRTUAL_MEMORY KCTL_CODE(1) //读虚拟内存
#define WRITE_VIRTUAL_MEMORY KCTL_CODE(2) //写虚拟内存
#define PROTECT_THE_CURRENT_PROCESS KCTL_CODE(3)//保护进程
#define UNPROTECT_THE_CURRENT_PROCESS KCTL_CODE(4)//保护进程
#define SET_TARGET_PROCESS_NAME KCTL_CODE(5)//设置目标进程名称
#define GET_TARGET_PROCESS_STATUS KCTL_CODE(6)//获取目标进程状态 0进程不存在 1进程已经加载

typedef struct _READ_VIRTUAL_MEMORY_STRUCT
{
	ULONG Address;
	PVOID Response;
	SIZE_T Size;

}READ_VIRTUAL_MEMORY_STRUCT, *PREAD_VIRTUAL_MEMORY_STRUCT;

typedef struct _WRITE_VIRTUAL_MEMORY_STRUCT
{
	ULONG Address;
	PVOID Value;
	SIZE_T Size;

}WRITE_VIRTUAL_MEMORY_STRUCT, *PWRITE_VIRTUAL_MEMORY_STRUCT;